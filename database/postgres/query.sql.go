// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package postgres

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (id, users, auth_info, wallet, level) VALUES ($1, $2, $3, $4, $5)
`

type CreateAccountParams struct {
	ID       uuid.UUID `json:"id"`
	Users    uuid.UUID `json:"users"`
	AuthInfo uuid.UUID `json:"auth_info"`
	Wallet   uuid.UUID `json:"wallet"`
	Level    uuid.UUID `json:"level"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.ExecContext(ctx, createAccount,
		arg.ID,
		arg.Users,
		arg.AuthInfo,
		arg.Wallet,
		arg.Level,
	)
	return err
}

const createAuthInfo = `-- name: CreateAuthInfo :exec
INSERT INTO auth_info (id, registered_number, pin) VALUES ($1, $2, $3)
`

type CreateAuthInfoParams struct {
	ID               uuid.UUID `json:"id"`
	RegisteredNumber int32     `json:"registered_number"`
	Pin              string    `json:"pin"`
}

func (q *Queries) CreateAuthInfo(ctx context.Context, arg CreateAuthInfoParams) error {
	_, err := q.db.ExecContext(ctx, createAuthInfo, arg.ID, arg.RegisteredNumber, arg.Pin)
	return err
}

const createCompany = `-- name: CreateCompany :exec
INSERT INTO companies (id, name, email, created_at) VALUES ($1, $2, $3, DEFAULT)
`

type CreateCompanyParams struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	Email string    `json:"email"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) error {
	_, err := q.db.ExecContext(ctx, createCompany, arg.ID, arg.Name, arg.Email)
	return err
}

const createCompanyAccount = `-- name: CreateCompanyAccount :exec
INSERT INTO companies_account (id, company, auth_info, wallet, virtual_account) VALUES ($1, $2, $3, $4, $5)
`

type CreateCompanyAccountParams struct {
	ID             uuid.UUID     `json:"id"`
	Company        uuid.UUID     `json:"company"`
	AuthInfo       uuid.UUID     `json:"auth_info"`
	Wallet         uuid.UUID     `json:"wallet"`
	VirtualAccount uuid.NullUUID `json:"virtual_account"`
}

func (q *Queries) CreateCompanyAccount(ctx context.Context, arg CreateCompanyAccountParams) error {
	_, err := q.db.ExecContext(ctx, createCompanyAccount,
		arg.ID,
		arg.Company,
		arg.AuthInfo,
		arg.Wallet,
		arg.VirtualAccount,
	)
	return err
}

const createTransfer = `-- name: CreateTransfer :exec
INSERT INTO transfers (id, from_wallet, to_wallet, balance, transfer_at) VALUES ($1, $2, $3, $3, DEFAULT)
`

type CreateTransferParams struct {
	ID         uuid.UUID `json:"id"`
	FromWallet uuid.UUID `json:"from_wallet"`
	ToWallet   uuid.UUID `json:"to_wallet"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) error {
	_, err := q.db.ExecContext(ctx, createTransfer, arg.ID, arg.FromWallet, arg.ToWallet)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, firstname, lastname, created_at, email, birth, phone) VALUES ($1, $2, $3, DEFAULT, $4, $5, $6)
`

type CreateUserParams struct {
	ID        uuid.UUID `json:"id"`
	Firstname string    `json:"firstname"`
	Lastname  string    `json:"lastname"`
	Email     string    `json:"email"`
	Birth     time.Time `json:"birth"`
	Phone     string    `json:"phone"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Birth,
		arg.Phone,
	)
	return err
}

const createVAPayment = `-- name: CreateVAPayment :exec
INSERT INTO va_payment (id, virtual_account, va_number, request_payment, paid_at) VALUES (NULL, $1, $2, $3, DEFAULT)
`

type CreateVAPaymentParams struct {
	VirtualAccount uuid.UUID `json:"virtual_account"`
	VaNumber       string    `json:"va_number"`
	RequestPayment float64   `json:"request_payment"`
}

func (q *Queries) CreateVAPayment(ctx context.Context, arg CreateVAPaymentParams) error {
	_, err := q.db.ExecContext(ctx, createVAPayment, arg.VirtualAccount, arg.VaNumber, arg.RequestPayment)
	return err
}

const createVirtualAccount = `-- name: CreateVirtualAccount :exec
INSERT INTO virtual_account (id, va_key, domain, va_identity, created_at) VALUES ($1, $2, $3, $4, DEFAULT)
`

type CreateVirtualAccountParams struct {
	ID         uuid.UUID      `json:"id"`
	VaKey      sql.NullString `json:"va_key"`
	Domain     sql.NullString `json:"domain"`
	VaIdentity int64          `json:"va_identity"`
}

func (q *Queries) CreateVirtualAccount(ctx context.Context, arg CreateVirtualAccountParams) error {
	_, err := q.db.ExecContext(ctx, createVirtualAccount,
		arg.ID,
		arg.VaKey,
		arg.Domain,
		arg.VaIdentity,
	)
	return err
}

const createWallet = `-- name: CreateWallet :exec
INSERT INTO wallets (id, balance, last_update) VALUES ($1, $2, DEFAULT)
`

type CreateWalletParams struct {
	ID      uuid.UUID `json:"id"`
	Balance float64   `json:"balance"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) error {
	_, err := q.db.ExecContext(ctx, createWallet, arg.ID, arg.Balance)
	return err
}
