// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package postgres

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (id, users, auth_info, wallet, permission) VALUES ($1, $2, $3, $4, $5)
`

type CreateAccountParams struct {
	ID         uuid.UUID `json:"id"`
	Users      uuid.UUID `json:"users"`
	AuthInfo   uuid.UUID `json:"auth_info"`
	Wallet     uuid.UUID `json:"wallet"`
	Permission uuid.UUID `json:"permission"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.ExecContext(ctx, createAccount,
		arg.ID,
		arg.Users,
		arg.AuthInfo,
		arg.Wallet,
		arg.Permission,
	)
	return err
}

const createAccountHaveCompany = `-- name: CreateAccountHaveCompany :exec
INSERT INTO account_have_company (account, company, company_wallet) VALUES ($1, $2, $3)
`

type CreateAccountHaveCompanyParams struct {
	Account       uuid.UUID `json:"account"`
	Company       uuid.UUID `json:"company"`
	CompanyWallet uuid.UUID `json:"company_wallet"`
}

func (q *Queries) CreateAccountHaveCompany(ctx context.Context, arg CreateAccountHaveCompanyParams) error {
	_, err := q.db.ExecContext(ctx, createAccountHaveCompany, arg.Account, arg.Company, arg.CompanyWallet)
	return err
}

const createAuthInfo = `-- name: CreateAuthInfo :exec
INSERT INTO auth_info (id, registered_number, pin) VALUES ($1, $2, $3)
`

type CreateAuthInfoParams struct {
	ID               uuid.UUID `json:"id"`
	RegisteredNumber int32     `json:"registered_number"`
	Pin              string    `json:"pin"`
}

func (q *Queries) CreateAuthInfo(ctx context.Context, arg CreateAuthInfoParams) error {
	_, err := q.db.ExecContext(ctx, createAuthInfo, arg.ID, arg.RegisteredNumber, arg.Pin)
	return err
}

const createCompany = `-- name: CreateCompany :exec
INSERT INTO companies (id, name, company_key) VALUES ($1, $2, $3)
`

type CreateCompanyParams struct {
	ID         uuid.UUID `json:"id"`
	Name       string    `json:"name"`
	CompanyKey string    `json:"company_key"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) error {
	_, err := q.db.ExecContext(ctx, createCompany, arg.ID, arg.Name, arg.CompanyKey)
	return err
}

const createCompanyWallet = `-- name: CreateCompanyWallet :exec
INSERT INTO companies_wallet (id, balance) VALUES ($1, $2)
`

type CreateCompanyWalletParams struct {
	ID      uuid.UUID `json:"id"`
	Balance float64   `json:"balance"`
}

func (q *Queries) CreateCompanyWallet(ctx context.Context, arg CreateCompanyWalletParams) error {
	_, err := q.db.ExecContext(ctx, createCompanyWallet, arg.ID, arg.Balance)
	return err
}

const createCoustomerWallet = `-- name: CreateCoustomerWallet :exec
INSERT INTO coustomer_wallet (id, balance, last_update) VALUES ($1, $2, DEFAULT)
`

type CreateCoustomerWalletParams struct {
	ID      uuid.UUID `json:"id"`
	Balance float64   `json:"balance"`
}

func (q *Queries) CreateCoustomerWallet(ctx context.Context, arg CreateCoustomerWalletParams) error {
	_, err := q.db.ExecContext(ctx, createCoustomerWallet, arg.ID, arg.Balance)
	return err
}

const createTransfer = `-- name: CreateTransfer :exec
INSERT INTO transfers (id, from_account, to_account, balance, transfer_at) VALUES ($1, $2, $3, $3, DEFAULT)
`

type CreateTransferParams struct {
	ID          uuid.UUID `json:"id"`
	FromAccount uuid.UUID `json:"from_account"`
	ToAccount   uuid.UUID `json:"to_account"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) error {
	_, err := q.db.ExecContext(ctx, createTransfer, arg.ID, arg.FromAccount, arg.ToAccount)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, firstname, lastname, created_at, email, birth, phone) VALUES ($1, $2, $3, DEFAULT, $4, $5, $6)
`

type CreateUserParams struct {
	ID        uuid.UUID `json:"id"`
	Firstname string    `json:"firstname"`
	Lastname  string    `json:"lastname"`
	Email     string    `json:"email"`
	Birth     time.Time `json:"birth"`
	Phone     string    `json:"phone"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Birth,
		arg.Phone,
	)
	return err
}

const createVirtualAccount = `-- name: CreateVirtualAccount :exec
INSERT INTO virtual_account (id, company_id, request_payment, va_number, paid_at) VALUES (NULL, $1, $2, $3, DEFAULT)
`

type CreateVirtualAccountParams struct {
	CompanyID      uuid.UUID `json:"company_id"`
	RequestPayment float64   `json:"request_payment"`
	VaNumber       string    `json:"va_number"`
}

func (q *Queries) CreateVirtualAccount(ctx context.Context, arg CreateVirtualAccountParams) error {
	_, err := q.db.ExecContext(ctx, createVirtualAccount, arg.CompanyID, arg.RequestPayment, arg.VaNumber)
	return err
}
