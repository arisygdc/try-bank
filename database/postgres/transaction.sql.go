// Code generated by sqlc. DO NOT EDIT.
// source: transaction.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const addBalance = `-- name: AddBalance :exec
UPDATE wallets SET balance = balance + $1 WHERE id = $2
`

type AddBalanceParams struct {
	Balance float64   `json:"balance"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) AddBalance(ctx context.Context, arg AddBalanceParams) error {
	_, err := q.db.ExecContext(ctx, addBalance, arg.Balance, arg.ID)
	return err
}

const checkVA = `-- name: CheckVA :one
SELECT ca.id as comp_id, va.id as va_id, ca.wallet as wallet_id, va.va_key, va.fqdn_detail_payment, fqdn_pay 
FROM virtual_account va
LEFT JOIN companies_account ca ON va.id = ca.virtual_account
WHERE va_identity = $1
`

type CheckVARow struct {
	CompID            uuid.NullUUID `json:"comp_id"`
	VaID              uuid.UUID     `json:"va_id"`
	WalletID          uuid.NullUUID `json:"wallet_id"`
	VaKey             string        `json:"va_key"`
	FqdnDetailPayment string        `json:"fqdn_detail_payment"`
	FqdnPay           string        `json:"fqdn_pay"`
}

func (q *Queries) CheckVA(ctx context.Context, vaIdentity int32) (CheckVARow, error) {
	row := q.db.QueryRowContext(ctx, checkVA, vaIdentity)
	var i CheckVARow
	err := row.Scan(
		&i.CompID,
		&i.VaID,
		&i.WalletID,
		&i.VaKey,
		&i.FqdnDetailPayment,
		&i.FqdnPay,
	)
	return i, err
}

const getBalance = `-- name: GetBalance :one
SELECT balance FROM wallets WHERE id = $1
`

func (q *Queries) GetBalance(ctx context.Context, id uuid.UUID) (float64, error) {
	row := q.db.QueryRowContext(ctx, getBalance, id)
	var balance float64
	err := row.Scan(&balance)
	return balance, err
}

const payVA = `-- name: PayVA :exec
INSERT INTO va_payment (id, virtual_account, va_number, request_payment, paid_at) VALUES ($1, $2, $3, $4, DEFAULT)
`

type PayVAParams struct {
	ID             uuid.UUID `json:"id"`
	VirtualAccount uuid.UUID `json:"virtual_account"`
	VaNumber       string    `json:"va_number"`
	RequestPayment float64   `json:"request_payment"`
}

func (q *Queries) PayVA(ctx context.Context, arg PayVAParams) error {
	_, err := q.db.ExecContext(ctx, payVA,
		arg.ID,
		arg.VirtualAccount,
		arg.VaNumber,
		arg.RequestPayment,
	)
	return err
}

const subtractBalance = `-- name: SubtractBalance :exec
UPDATE wallets SET balance = balance - $1 WHERE id = $2
`

type SubtractBalanceParams struct {
	Balance float64   `json:"balance"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) SubtractBalance(ctx context.Context, arg SubtractBalanceParams) error {
	_, err := q.db.ExecContext(ctx, subtractBalance, arg.Balance, arg.ID)
	return err
}
