// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: wallet.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
)

const addBalance = `-- name: AddBalance :execrows
UPDATE wallets SET balance = (balance + $1) WHERE id = $2
`

type AddBalanceParams struct {
	Balance float64   `json:"balance"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) AddBalance(ctx context.Context, arg AddBalanceParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, addBalance, arg.Balance, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const subtractBalance = `-- name: SubtractBalance :execrows
UPDATE wallets SET balance = (balance - $1) WHERE id = $2
`

type SubtractBalanceParams struct {
	Balance float64   `json:"balance"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) SubtractBalance(ctx context.Context, arg SubtractBalanceParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, subtractBalance, arg.Balance, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const transfer = `-- name: Transfer :exec
INSERT INTO transfers (id, from_wallet, to_wallet, balance, transfered_at) VALUES ($1, $2, $3, $4, DEFAULT)
`

type TransferParams struct {
	ID         uuid.UUID `json:"id"`
	FromWallet uuid.UUID `json:"from_wallet"`
	ToWallet   uuid.UUID `json:"to_wallet"`
	Balance    float64   `json:"balance"`
}

func (q *Queries) Transfer(ctx context.Context, arg TransferParams) error {
	_, err := q.db.ExecContext(ctx, transfer,
		arg.ID,
		arg.FromWallet,
		arg.ToWallet,
		arg.Balance,
	)
	return err
}
