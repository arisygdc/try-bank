// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: virtual_account.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
)

const activateVirtualAccount = `-- name: ActivateVirtualAccount :execrows
UPDATE companies_account SET virtual_account_id = $1 WHERE company_id = $2
`

type ActivateVirtualAccountParams struct {
	VirtualAccountID uuid.NullUUID `json:"virtual_account_id"`
	CompanyID        uuid.UUID     `json:"company_id"`
}

func (q *Queries) ActivateVirtualAccount(ctx context.Context, arg ActivateVirtualAccountParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, activateVirtualAccount, arg.VirtualAccountID, arg.CompanyID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const checkActiveIssueVAP = `-- name: CheckActiveIssueVAP :one
SELECT id, virtual_account_id, virtual_account_number, payment_charge, issued_at FROM issued_payment 
WHERE virtual_account_id = $1
AND virtual_account_number = $2
AND issued_at + INTERVAL '1 day' > NOW()
AND id NOT IN (SELECT issued_payment_id FROM va_payment)
`

type CheckActiveIssueVAPParams struct {
	VirtualAccountID     uuid.UUID `json:"virtual_account_id"`
	VirtualAccountNumber int32     `json:"virtual_account_number"`
}

func (q *Queries) CheckActiveIssueVAP(ctx context.Context, arg CheckActiveIssueVAPParams) (IssuedPayment, error) {
	row := q.db.QueryRowContext(ctx, checkActiveIssueVAP, arg.VirtualAccountID, arg.VirtualAccountNumber)
	var i IssuedPayment
	err := row.Scan(
		&i.ID,
		&i.VirtualAccountID,
		&i.VirtualAccountNumber,
		&i.PaymentCharge,
		&i.IssuedAt,
	)
	return i, err
}

const createVirtualAccount = `-- name: CreateVirtualAccount :exec
INSERT INTO virtual_account (id, authorization_key, identity, callback_url, created_at) VALUES ($1, $2, $3, $4, DEFAULT)
`

type CreateVirtualAccountParams struct {
	ID               uuid.UUID `json:"id"`
	AuthorizationKey string    `json:"authorization_key"`
	Identity         int32     `json:"identity"`
	CallbackUrl      string    `json:"callback_url"`
}

func (q *Queries) CreateVirtualAccount(ctx context.Context, arg CreateVirtualAccountParams) error {
	_, err := q.db.ExecContext(ctx, createVirtualAccount,
		arg.ID,
		arg.AuthorizationKey,
		arg.Identity,
		arg.CallbackUrl,
	)
	return err
}

const issuePaymentVA = `-- name: IssuePaymentVA :exec
INSERT INTO issued_payment (id, virtual_account_id, virtual_account_number, payment_charge) VALUES ($1, $2, $3, $4)
`

type IssuePaymentVAParams struct {
	ID                   uuid.UUID `json:"id"`
	VirtualAccountID     uuid.UUID `json:"virtual_account_id"`
	VirtualAccountNumber int32     `json:"virtual_account_number"`
	PaymentCharge        float64   `json:"payment_charge"`
}

func (q *Queries) IssuePaymentVA(ctx context.Context, arg IssuePaymentVAParams) error {
	_, err := q.db.ExecContext(ctx, issuePaymentVA,
		arg.ID,
		arg.VirtualAccountID,
		arg.VirtualAccountNumber,
		arg.PaymentCharge,
	)
	return err
}

const paymentVA = `-- name: PaymentVA :one
INSERT INTO va_payment (id, issued_payment_id) VALUES ($1, $2) RETURNING id, issued_payment_id, paid_at
`

type PaymentVAParams struct {
	ID              uuid.UUID `json:"id"`
	IssuedPaymentID uuid.UUID `json:"issued_payment_id"`
}

func (q *Queries) PaymentVA(ctx context.Context, arg PaymentVAParams) (VaPayment, error) {
	row := q.db.QueryRowContext(ctx, paymentVA, arg.ID, arg.IssuedPaymentID)
	var i VaPayment
	err := row.Scan(&i.ID, &i.IssuedPaymentID, &i.PaidAt)
	return i, err
}

const virtualAccountID = `-- name: VirtualAccountID :one
SELECT id FROM virtual_account WHERE identity = $1
`

func (q *Queries) VirtualAccountID(ctx context.Context, identity int32) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, virtualAccountID, identity)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
